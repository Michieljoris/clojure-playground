// Compiled by ClojureScript 0.0-2138
goog.provide('cljs_tutorial.core');
goog.require('cljs.core');
goog.require('clojure.string');
goog.require('clojure.string');
clojure.string.blank_QMARK_.call(null,"");
clojure.string.blank_QMARK_.call(null,"");
[cljs.core.str("The secret word is ")].join('');
cljs_tutorial.core.x = 1;
var x_4750 = 2;cljs_tutorial.core.y = (function y(){return 1;
});
cljs_tutorial.core.y.call(null);
cljs_tutorial.core.z = (function z(){return 1;
});
cljs_tutorial.core.z.call(null);
cljs_tutorial.core.a_boolean = true;
cljs_tutorial.core.a_string = "Hello!";
cljs_tutorial.core.a_regexp = /\d{3}-?\d{3}-?\d{4}/;
cljs_tutorial.core.a_number = 1;
cljs.core.map.call(null,(function (n){return (n * 2);
}),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2,3,4,5], null));
cljs.core.map.call(null,(function (p1__4751_SHARP_){return (p1__4751_SHARP_ * 2);
}),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2,3,4,5], null));
cljs_tutorial.core.an_array = [1,2,3];
cljs_tutorial.core.another_array = [1,2,3];
cljs_tutorial.core.an_object = (function (){var obj4753 = {"foo":"bar"};return obj4753;
})();
cljs_tutorial.core.another_object = {"foo": "bar"};
cljs_tutorial.core.shallow = {"foo": new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2,3], null)};
cljs_tutorial.core.a_date = (new Date());
cljs_tutorial.core.another_date = new Date(1389744000000);
cljs_tutorial.core.another_regexp = (new RegExp("\\d{3}-?\\d{3}-?\\d{4}"));
cljs_tutorial.core.a_vector = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2,3,4,5], null);
cljs.core.count.call(null,cljs_tutorial.core.a_vector);
cljs_tutorial.core.another_vector = cljs.core.conj.call(null,cljs_tutorial.core.a_vector,6);
cljs.core.nth.call(null,cljs_tutorial.core.a_vector,1);
cljs.core.nth.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["foo","bar","baz"], null),1);
cljs.core.get.call(null,cljs_tutorial.core.a_vector,0);
cljs.core.get.call(null,cljs_tutorial.core.a_vector,-1,new cljs.core.Keyword(null,"out-of-bounds","out-of-bounds",996384542));
cljs.core.get.call(null,cljs_tutorial.core.a_vector,cljs.core.count.call(null,cljs_tutorial.core.a_vector),new cljs.core.Keyword(null,"out-of-bounds","out-of-bounds",996384542));
cljs_tutorial.core.a_vector.call(null,5);
new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["foo","bar","baz"], null).call(null,1);
cljs_tutorial.core.a_map = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"foo","foo",1014005816),"bar",new cljs.core.Keyword(null,"baz","baz",1014001549),"woz"], null);
cljs.core.count.call(null,cljs_tutorial.core.a_map);
cljs.core.get.call(null,cljs_tutorial.core.a_map,new cljs.core.Keyword(null,"foo","foo",1014005816));
cljs.core.get.call(null,cljs_tutorial.core.a_map,new cljs.core.Keyword(null,"bar","bar",1014001541),new cljs.core.Keyword(null,"not-found","not-found",1197973370));
cljs_tutorial.core.another_map = cljs.core.assoc.call(null,cljs_tutorial.core.a_map,new cljs.core.Keyword(null,"noz","noz",1014013515),"goz");
cljs.core.dissoc.call(null,cljs_tutorial.core.a_map,new cljs.core.Keyword(null,"foo","foo",1014005816));
cljs_tutorial.core.a_map.call(null,new cljs.core.Keyword(null,"foo","foo",1014005816));
new cljs.core.Keyword(null,"foo","foo",1014005816).cljs$core$IFn$_invoke$arity$1(cljs_tutorial.core.a_map);
cljs.core.contains_QMARK_.call(null,cljs_tutorial.core.a_map,new cljs.core.Keyword(null,"foo","foo",1014005816));
cljs.core.keys.call(null,cljs_tutorial.core.a_map);
cljs.core.vals.call(null,cljs_tutorial.core.a_map);
cljs_tutorial.core.a_nested_map = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"customer-id","customer-id",3536762076),1000000.0,new cljs.core.Keyword(null,"preferences","preferences",3003765354),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"nickname","nickname",1084595168),"Bob",new cljs.core.Keyword(null,"avatar","avatar",3902911691),"http://en.gravatar.com/userimage/0/0.jpg"], null),new cljs.core.Keyword(null,"services","services",2393113552),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"alerts","alerts",3893794313),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"daily","daily",1109250443),true], null)], null)], null);
cljs.core.get_in.call(null,cljs_tutorial.core.a_nested_map,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"preferences","preferences",3003765354),new cljs.core.Keyword(null,"nickname","nickname",1084595168)], null));
cljs.core.get_in.call(null,cljs_tutorial.core.a_nested_map,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"services","services",2393113552),new cljs.core.Keyword(null,"alerts","alerts",3893794313),new cljs.core.Keyword(null,"daily","daily",1109250443)], null));
cljs.core.find.call(null,cljs_tutorial.core.a_nested_map,new cljs.core.Keyword(null,"customer-id","customer-id",3536762076));
cljs.core.find.call(null,cljs_tutorial.core.a_nested_map,new cljs.core.Keyword(null,"services","services",2393113552));
cljs.core.zipmap.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"foo","foo",1014005816),new cljs.core.Keyword(null,"bar","bar",1014001541),new cljs.core.Keyword(null,"baz","baz",1014001549)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2,3], null));
cljs.core.PersistentHashMap.fromArrays.call(null,[new cljs.core.Keyword(null,"foo","foo",1014005816),new cljs.core.Keyword(null,"bar","bar",1014001541),new cljs.core.Keyword(null,"baz","baz",1014001549)],[1,2,3]);
cljs.core.apply.call(null,cljs.core.hash_map,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"foo","foo",1014005816),1,new cljs.core.Keyword(null,"bar","bar",1014001541),2,new cljs.core.Keyword(null,"baz","baz",1014001549),3], null));
cljs.core.into.call(null,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"foo","foo",1014005816),1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"bar","bar",1014001541),2], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"baz","baz",1014001549),3], null)], null));
cljs_tutorial.core.complex_map = new cljs.core.PersistentArrayMap.fromArray([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2], null),new cljs.core.Keyword(null,"one-two","one-two",3986503127),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3,4], null),new cljs.core.Keyword(null,"three-four","three-four",4188163943)], true, false);
cljs.core.get.call(null,cljs_tutorial.core.complex_map,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3,4], null));
cljs.core.identity.call(null,new cljs.core.Keyword(null,"foo","foo",1014005816));
cljs.core.identity.call(null,new cljs.core.Keyword("cljs-tutorial.core","foo","cljs-tutorial.core/foo",640535945));
cljs.core.identity.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("user","foo","user/foo",1248778675),new cljs.core.Keyword("cljs-tutorial.core","foo","cljs-tutorial.core/foo",640535945)], null));
cljs_tutorial.core.a_set = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"dog","dog",1014003886),null,new cljs.core.Keyword(null,"cat","cat",1014002504),null,new cljs.core.Keyword(null,"bird","bird",1016928299),null], null), null);
cljs.core.conj.call(null,cljs_tutorial.core.a_set,new cljs.core.Keyword(null,"cat","cat",1014002504));
cljs.core.conj.call(null,cljs_tutorial.core.a_set,new cljs.core.Keyword(null,"zebra","zebra",1129680504));
cljs.core.contains_QMARK_.call(null,cljs_tutorial.core.a_set,new cljs.core.Keyword(null,"cat","cat",1014002504));
new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"dog","dog",1014003886),null,new cljs.core.Keyword(null,"cat","cat",1014002504),null,new cljs.core.Keyword(null,"bird","bird",1016928299),null], null), null).call(null,new cljs.core.Keyword(null,"cat","cat",1014002504));
new cljs.core.Keyword(null,"cat","cat",1014002504).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"dog","dog",1014003886),null,new cljs.core.Keyword(null,"cat","cat",1014002504),null,new cljs.core.Keyword(null,"bird","bird",1016928299),null], null), null));
cljs_tutorial.core.check = (function check(x){if(cljs.core.truth_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"dog","dog",1014003886),null,new cljs.core.Keyword(null,"cat","cat",1014002504),null,new cljs.core.Keyword(null,"bird","bird",1016928299),null], null), null).call(null,x)))
{return new cljs.core.Keyword(null,"valid","valid",1125876590);
} else
{return new cljs.core.Keyword(null,"invalid","invalid",2973689193);
}
});
cljs_tutorial.core.check.call(null,new cljs.core.Keyword(null,"cat","cat",1014002504));
cljs_tutorial.core.check.call(null,new cljs.core.Keyword(null,"zebra","zebra",1129680504));
cljs_tutorial.core.a_list = cljs.core.list(new cljs.core.Keyword(null,"foo","foo",1014005816),new cljs.core.Keyword(null,"bar","bar",1014001541),new cljs.core.Keyword(null,"baz","baz",1014001549));
cljs.core.conj.call(null,cljs_tutorial.core.a_list,new cljs.core.Keyword(null,"front","front",1111609755));
cljs.core.first.call(null,cljs_tutorial.core.a_list);
cljs.core.rest.call(null,cljs_tutorial.core.a_list);
cljs_tutorial.core.another_list = cljs.core.conj.call(null,cljs_tutorial.core.a_list,new cljs.core.Keyword(null,"front","front",1111609755));
(cljs.core.rest.call(null,cljs_tutorial.core.another_list) === cljs_tutorial.core.a_list);
cljs.core._EQ_.call(null,cljs.core.rest.call(null,cljs_tutorial.core.another_list),cljs_tutorial.core.a_list);
cljs.core._EQ_.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"foo","foo",1014005816),"bar",new cljs.core.Keyword(null,"baz","baz",1014001549),"woz"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"foo","foo",1014005816),"bar",new cljs.core.Keyword(null,"baz","baz",1014001549),"woz"], null));
cljs.core._EQ_.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"foo","foo",1014005816),"bar",new cljs.core.Keyword(null,"baz","baz",1014001549),"woz"], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"baz","baz",1014001549),"woz",new cljs.core.Keyword(null,"foo","foo",1014005816),"bar"], null));
cljs.core._EQ_.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2,3], null),cljs.core.list(1,2,3));
cljs_tutorial.core.my_vec = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2,3], null);
cljs_tutorial.core.your_vec = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1,2,3], null);
